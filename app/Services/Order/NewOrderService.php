<?php

namespace App\Services\Order;

use App\Cart\Cart;
use App\Enums\OrderStatusEnum;
use App\Facades\Order\OrderFacade;
use App\Facades\Order\OrderShippingDetails;
use App\Facades\PushNotification\PushNotificationFacade;
use App\Models\Order;
use App\Models\OrderItem;
use App\Models\OrderStatus;
use App\Models\Product;
use App\Models\User;
use App\Services\DeviceToken\DeviceTokenService;
use Illuminate\Support\Facades\Log;

class NewOrderService
{
    public function create()
    {
        $responseValidate = $this->validate();
        if (!empty($responseValidate)) {
            return response()->json($responseValidate, 422);
        }

        $shippingDetails = OrderShippingDetails::get();

        $deviceTokenService = new DeviceTokenService();

        $order = Order::create([
            'total' =>  Cart::totalPrice(),
            'discount_total' =>  0,
            'delivery_fee' =>  Cart::getDeliveryFee(),
            'name' => $shippingDetails->fullName,
            'address' =>  $shippingDetails->address,
            'phone' =>  $shippingDetails->phone,
            'ip_address' =>  request()->ip(),
            'user_agent' =>  request()->server('HTTP_USER_AGENT'),
            'status' => OrderStatusEnum::PENDING,
            'device_token' => deviceInfo()->getDeviceToken(),
            'app_version' => deviceInfo()->getAppVersion(),
            'device_id' => $deviceTokenService->getCacheId() == "" ? null : $deviceTokenService->getCacheId()
        ]);

        $this->createItems($order);
        $this->createStatus($order);
        $order = $order->updateTotalCalculation();
        $order->addCookie();
        $this->sendOrderNotification($order);

        return response()->json([
            'message' => 'ржЕрж░рзНржбрж╛рж░ ржХрж░рж╛рж░ ржЬржирзНржп ржЖржкржирж╛ржХрзЗ ржЕржнрж┐ржиржирзНржжржиред',
            'url' => route('store.order.show', ['uuid' => $order->uuid])
        ]);
    }

    public function validate()
    {
        if (OrderShippingDetails::isValidateFails()) {
            return [
                'body' => view("store.order.checkout.body_livewire", ['checkValidate' => true])->render(),
            ];
        }

        if (Cart::isEmpty()) {
            return [
                'message' => "ржЖржкржирж╛рж░ ржмрзНржпрж╛ржЧрзЗ ржХрзЛржи ржкржгрзНржп ржирзЗржЗред",
            ];
        }

        $offerValidation = $this->offerValidation();
        if (!empty($offerValidation)) {
            return ['message' => $offerValidation];
        }

        $activeOrders = OrderFacade::userOrder()->active();

        if (count($activeOrders) >= 3 && !auth()->check()) {
            return [
                'message' => "ржЖржкржирж╛рж░ ржЗрждрж┐ржоржзрзНржпрзЗ рждрж┐ржиржЯрж┐ ржЕрж░рзНржбрж╛рж░ ржкрзЗржирзНржбрж┐ржВ ржП ржЖржЫрзЗред ржЖрж░ржУ ржЕрж░рзНржбрж╛рж░ ржХрж░рждрзЗ ржЖржорж╛ржжрзЗрж░ рж╣ржЯ рж▓рж╛ржЗржирзЗ ржпрзЛржЧрж╛ржпрзЛржЧ ржХрж░рзБржиред ржЖржорж╛ржжрзЗрж░ рж╣ржЯрж▓рж╛ржЗржи ржиржорзНржмрж░ " . config('bibisena.mobile_number') . "ред",
            ];
        }

        return [];
    }

    public function createStatus(Order $order)
    {
        $orderStatusList = array_diff(OrderStatusEnum::getValues(), ['pending', 'canceled']);
        foreach ($orderStatusList as $key => $status) {
            OrderStatus::create([
                'order_id' => $order->id,
                'name' => $status
            ]);
        }
    }

    public function createItems(Order $order)
    {
        $items = Cart::items();
        foreach ($items as $item) {
            $product = Product::where(['id' => $item->id])->first();
            if (!$product) continue;
            OrderItem::create([
                'order_id' => $order->id,
                'product_id' => $product ? $product->id : null,

                'name' => $product->name,
                'unit' => $product->unit,
                'unit_quantity' => $product->quantity,

                'quantity' => $item->cart_quantity,
                'price' => $product->price,
                'wholesale_price' => $product->wholesale_price,
                'wholesale_price_update_time' => $product->wholesale_price_last_update,
                'delivery_fee' => is_null($product->delivery_fee) ? config('bibisena.default_delivery_fee') : $product->delivery_fee
            ]);
        }

        Cart::clear();
    }

    private function sendOrderNotification(Order $order)
    {
        $this->sendCustomerNotification($order);
        $this->sendAdminNotification($order);
    }

    private function sendCustomerNotification(Order $order)
    {
        if (!deviceInfo()->hasDeviceToken()) return;

        $body = "ЁЯФЦ ржЖржкржирж╛рж░ ржЕрж░рзНржбрж╛рж░ ржиржорзНржмрж░ : " . bnConvert()->number($order->id);
        $body .= "\nЁЯЫТ ржкржгрзНржпрзЗрж░ ржорзВрж▓рзНржп: рз│ " . bnConvert()->number($order->subtotal);
        $body .= "\nЁЯЪС ржбрзЗрж▓рж┐ржнрж╛рж░рж┐ ржлрзА: рз│ " . bnConvert()->number($order->delivery_fee);
        $body .= "\nЁЯТ╡ рж╕рж░рзНржмржорзЛржЯ: рз│ " . bnConvert()->number($order->total);
        $body .= "\nЁЯУМ ржЖржорж░рж╛ рзи ржерзЗржХрзЗ рзй ржШржирзНржЯрж╛рж░ ржоржзрзНржпрзЗ ржЖржкржирж╛рж░ ржЕрж░рзНржбрж╛рж░ржЯрж┐ ржбрзЗрж▓рж┐ржнрж╛рж░рж┐ ржжрзЗрзЯрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░ржмрзЛред ржбрзЗрж▓рж┐ржнрж╛рж░рж┐ ржПрж░ рж╕ржорзЯ ржЖржкржирж╛ржХрзЗ " . bnConvert()->number($order->total) . " ржЯрж╛ржХрж╛ ржкрж░рж┐рж╢рзЛржз ржХрж░рждрзЗ рж╣ржмрзЗред";

        PushNotificationFacade::sendNotification([deviceInfo()->getDeviceToken()], [
            'title' => "ржмрж┐ржмрж┐рж╕рж╛ржирж╛рзЯ ржЕрж░рзНржбрж╛рж░ ржХрж░рж╛рж░ ржЬржирзНржп ржЖржкржирж╛ржХрзЗ ржЕржнрж┐ржиржирзНржжржи ЁЯТР\n",
            'body' => $body,
            "url" => route('store.order.show', ['uuid' => $order->uuid]),
        ]);
    }

    private function sendAdminNotification(Order $order)
    {
        $tokens = OrderFacade::getManagerDeviceToken();
        if (empty($tokens)) return;

        $body = "ЁЯФЦ ржЕрж░рзНржбрж╛рж░ ржиржорзНржмрж░ : " . bnConvert()->number($order->id);
        $body .= "\nЁЯЫТ ржкржгрзНржпрзЗрж░ ржорзВрж▓рзНржп: рз│ " . bnConvert()->number($order->subtotal);
        $body .= "\nЁЯЪС ржбрзЗрж▓рж┐ржнрж╛рж░рж┐ ржлрзА: рз│ " . bnConvert()->number($order->delivery_fee);
        $body .= "\nЁЯТ╡ рж╕рж░рзНржмржорзЛржЯ: рз│ " . bnConvert()->number($order->total);
        $body .= "\nтП░ рж╕ржорзЯ : " . bnConvert()->date($order->created_at->format('d M Y, H:i'));

        PushNotificationFacade::sendNotification($tokens, [
            'title' => "ржмрж┐ржмрж┐рж╕рзЗржирж╛рзЯ ржирждрзБржи ржПржХржЯрж┐ ржЕрж░рзНржбрж╛рж░ ржПрж╕рзЗржЫрзЗред ржЕрж░рзНржбрж╛рж░ржЯрж┐ ржкрзНрж░рж╕рзЗрж╕рж┐ржВ ржХрж░рзБржиредЁЯТР\n",
            'body' => $body,
            "url" => route('orders.show', ['order' => $order->id]),
        ]);
    }

    private function offerValidation()
    {
        $itemsId = collect(Cart::items())->where('id', env('FREE_PRODUCT_ID'))->pluck('id');
        $freeProduct = Product::whereIn('id', $itemsId)->first();
        if (!$freeProduct) return "";
        if (!deviceInfo()->isBibisenaApp()) {
            return "ржЖржкржирж╛ржХрзЗ ржлрзНрж░рж┐ ржЕржлрж╛рж░ржЯрж┐ ржкрзЗрждрзЗ ржЕржмрж╢рзНржпржЗ ржмрж┐ржмрж┐рж╕рзЗржирж╛ ржорзЛржмрж╛ржЗрж▓ ржПржк ржерзЗржХрзЗ ржЕрж░рзНржбрж╛рж░ ржХрж░рждрзЗ рж╣ржмрзЗред ржПржкржЯрж┐ ржбрж╛ржУржирж▓рзЛржб ржХрж░рзБржиржГ <a href='https://app.bibisena.com/'>https://app.bibisena.com</a>";
        }

        $shippingDetails = OrderShippingDetails::get();
        $mobileNumber = $shippingDetails->phone;
        $productId = $freeProduct->id;

        $ordersWithProduct = Order::whereHas('items', function ($query) use ($productId) {
            $query->where('product_id', $productId);
        })->where('is_cancelled', false)->where('phone', $mobileNumber);


        if ($ordersWithProduct->count() > 0) {
            return "ржЖржкржирж╛рж░ ржорзЛржмрж╛ржЗрж▓ ржирж╛ржорзНржмрж╛рж░ ржерзЗржХрзЗ ржЗрждрж┐ржоржзрзНржпрзЗ ржПржХржЯрж┐ ржЕрж░рзНржбрж╛рж░ ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗред ржЖржкржирж╛ржХрзЗ ржлрзНрж░рж┐ ржЕржлрж╛рж░ржЯрж┐ ржкрзЗрждрзЗ ржПржХржЯрж┐ ржирж╛ржорзНржмрж╛рж░ ржерзЗржХрзЗ ржПржХржЯрж┐ ржЕрж░рзНржбрж╛рж░ ржХрж░рждрзЗ ржкрж╛рж░ржмрзЗржиред";
        }

        $deviceTokenService = new DeviceTokenService();

        $ordersWithProduct = Order::whereHas('items', function ($query) use ($productId) {
            $query->where('product_id', $productId);
        })->where('is_cancelled', false)->where('device_id', $deviceTokenService->getCacheId());


        if ($ordersWithProduct->count() > 0) {
            return "ржЖржкржирж╛рж░ ржПржкрж╕ ржерзЗржХрзЗ ржЗрждрж┐ржоржзрзНржпрзЗ ржПржХржЯрж┐ ржЕрж░рзНржбрж╛рж░ ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗред ржЖржкржирж╛ржХрзЗ ржлрзНрж░рж┐ ржЕржлрж╛рж░ржЯрж┐ ржкрзЗрждрзЗ ржПржХржЯрж┐ ржПржкрж╕ ржерзЗржХрзЗ ржПржХржЯрж┐ ржЕрж░рзНржбрж╛рж░ ржХрж░рждрзЗ ржкрж╛рж░ржмрзЗржиред";
        }

        //check mobile device
        //check mobile number
        //check device already 
        return "";
    }
}
